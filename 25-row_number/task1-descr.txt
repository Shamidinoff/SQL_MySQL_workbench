ROW_NUMBER(): Эта функция возвращает уникальный номер для каждой строки результата запроса в порядке, определенном ORDER BY. При одинаковых значениях в ORDER BY для разных строк, каждая строка получит уникальный номер. Например, если двум строкам соответствуют одинаковые значения ORDER BY, то ROW_NUMBER() вернет разные числа для каждой из этих строк.

RANK(): Функция RANK() также присваивает номер каждой строке в соответствии с порядком из ORDER BY. Однако, если несколько строк имеют одинаковые значения ORDER BY, функция RANK() назначит им один и тот же номер и пропустит следующий номер. Например, если двум строкам соответствуют одинаковые значения ORDER BY, RANK() присвоит им одинаковый номер, пропустив следующий по порядку.

DENSE_RANK(): Эта функция также назначает номер каждой строке в соответствии с порядком из ORDER BY. Однако, в отличие от RANK(), если несколько строк имеют одинаковые значения ORDER BY, DENSE_RANK() присвоит им одинаковый номер, но не пропустит следующий номер. Например, если двум строкам соответствуют одинаковые значения ORDER BY, DENSE_RANK() присвоит им одинаковый номер, и следующая строка получит следующий по порядку номер.

***

Функции CUME_DIST() и PERCENT_RANK() в SQL используются для вычисления относительных позиций значений в упорядоченном наборе данных, но их поведение немного различается:

CUME_DIST(): Эта функция вычисляет кумулятивное распределение значений. Она возвращает долю строк, которые имеют значение, меньшее или равное текущему значению, по отношению ко всем строкам в окне (или группе). Например, если есть 10 строк и значение CUME_DIST() для определенной строки равно 0,6, это означает, что 60% строк имеют значение, меньшее или равное значению этой строки.

PERCENT_RANK(): Эта функция вычисляет относительный ранг каждого значения в упорядоченном наборе данных. Она возвращает относительный порядковый номер значения, который выражается в виде значения между 0 и 1, причем 0 обозначает наименьшее значение, а 1 - наибольшее значение в упорядоченном наборе данных. Если все значения одинаковы, PERCENT_RANK() вернет 0.

Главное отличие между ними заключается в том, как они интерпретируют относительные позиции:

CUME_DIST() отражает, какую долю составляют значения, меньшие или равные текущему значению, относительно всего набора данных.
PERCENT_RANK() выражает относительный порядок каждого значения от 0 до 1 в упорядоченном наборе данных.
Обе функции полезны для анализа относительных позиций значений в упорядоченных наборах данных, но их выбор зависит от конкретных потребностей анализа данных.

***

Функция NTILE() в SQL используется для разделения упорядоченного набора данных на определенное количество равных или примерно равных групп. Основные особенности NTILE():

Разбиение на равные группы: NTILE() делит упорядоченный набор данных на заданное количество групп (определенное числом в скобках после функции).

Равное количество элементов в группах: При равномерном распределении значений в наборе данных, функция постарается разделить их так, чтобы каждая группа содержала приблизительно одинаковое количество значений.

Примерное разделение: Если число строк не делится ровно на количество групп, некоторые группы могут содержать на одну запись больше или меньше, чтобы обеспечить более равномерное разделение.

Нумерация групп: Функция NTILE() присваивает каждой строке номер группы, к которой она принадлежит, начиная с 1 и до заданного числа групп.

Пример использования NTILE():


SELECT
    column_name,
    NTILE(4) OVER (ORDER BY column_name) AS quartile
FROM
    your_table;

Этот запрос разделит значения столбца column_name на 4 группы (NTILE(4)) в соответствии с их упорядоченным порядком и присвоит каждой строке номер группы (quartile) от 1 до 4.






